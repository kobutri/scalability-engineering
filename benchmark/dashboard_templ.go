// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.906
package main

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
)

const morphSwap = "morph:{ignoreActiveValue:true,morphStyle:'innerHTML'}"

func BenchmarkDashboard(data *BenchmarkData) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Bootstrap Benchmark Tool</title><script src=\"https://cdn.jsdelivr.net/npm/htmx.org@2.0.5/dist/htmx.js\"></script><script src=\"https://unpkg.com/idiomorph@0.7.3/dist/idiomorph.js\"></script><script src=\"https://unpkg.com/idiomorph@0.7.3/dist/idiomorph-ext.js\"></script><script src=\"https://unpkg.com/htmx-ext-json-enc@2.0.1/json-enc.js\"></script><script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = benchmarkStyles().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</head><body><div class=\"container\"><div class=\"header\"><h1>Bootstrap Benchmark Tool</h1><div class=\"service-info\"><div class=\"service-name\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(data.ServiceName)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `benchmark/dashboard.templ`, Line: 28, Col: 50}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</div><div class=\"uptime\">Uptime: ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(data.UptimeFormatted)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `benchmark/dashboard.templ`, Line: 29, Col: 56}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "</div><div class=\"current-time\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(data.CurrentTime)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `benchmark/dashboard.templ`, Line: 30, Col: 50}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</div></div></div><div class=\"dashboard-content\"><div class=\"main-panels\"><!-- Control Panel --><div class=\"panel-section\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = BenchmarkControlPanel(data).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "</div><!-- Metrics Panel --><div class=\"panel-section\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = BenchmarkMetricsPanel(data).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "</div><!-- Configuration Panel --><div class=\"panel-section\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = BenchmarkConfigPanel(data).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "</div><!-- Graphs Section --><div class=\"graphs-section\"><h2>Performance Metrics</h2><div class=\"graph-grid\"><div class=\"graph-container\"><h3>Throughput (Operations/Second)</h3><div class=\"graph-content\"><canvas id=\"throughput-canvas\"></canvas></div></div><div class=\"graph-container\"><h3>Error Rate (%)</h3><div class=\"graph-content\"><canvas id=\"error-canvas\"></canvas></div></div><div class=\"graph-container\"><h3>P99 Latency (ms)</h3><div class=\"graph-content\"><canvas id=\"latency-canvas\"></canvas></div></div></div></div><!-- Clients Panel --><div class=\"graphs-section\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = BenchmarkClientsPanel(data).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "</div></div></div></div><script>\n\t\t\t\t// Global chart variables\n\t\t\t\tlet throughputChart, latencyChart, errorChart;\n\n\t\t\t\t// Initialize charts on page load\n\t\t\t\tdocument.addEventListener('DOMContentLoaded', function() {\n\t\t\t\t\t// Initialize throughput chart\n\t\t\t\t\tconst throughputCtx = document.getElementById('throughput-canvas').getContext('2d');\n\t\t\t\t\tthroughputChart = new Chart(throughputCtx, {\n\t\t\t\t\t\ttype: 'line',\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tlabels: [],\n\t\t\t\t\t\t\tdatasets: [{\n\t\t\t\t\t\t\t\tlabel: 'Actual OPS',\n\t\t\t\t\t\t\t\tdata: [],\n\t\t\t\t\t\t\t\tborderColor: '#4CAF50',\n\t\t\t\t\t\t\t\tbackgroundColor: 'rgba(76, 175, 80, 0.1)',\n\t\t\t\t\t\t\t\tborderWidth: 2,\n\t\t\t\t\t\t\t\tfill: false,\n\t\t\t\t\t\t\t\ttension: 0.1\n\t\t\t\t\t\t\t}, {\n\t\t\t\t\t\t\t\tlabel: 'Expected OPS',\n\t\t\t\t\t\t\t\tdata: [],\n\t\t\t\t\t\t\t\tborderColor: '#e0e0e0',\n\t\t\t\t\t\t\t\tborderDash: [5, 5],\n\t\t\t\t\t\t\t\tborderWidth: 1,\n\t\t\t\t\t\t\t\tfill: false,\n\t\t\t\t\t\t\t\tpointRadius: 0\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t},\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\tresponsive: true,\n\t\t\t\t\t\t\tmaintainAspectRatio: false,\n\t\t\t\t\t\t\tanimation: {\n\t\t\t\t\t\t\t\tduration: 750\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tscales: {\n\t\t\t\t\t\t\t\ty: {\n\t\t\t\t\t\t\t\t\tbeginAtZero: true,\n\t\t\t\t\t\t\t\t\ttitle: {\n\t\t\t\t\t\t\t\t\t\tdisplay: true,\n\t\t\t\t\t\t\t\t\t\ttext: 'Operations/Second'\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tx: {\n\t\t\t\t\t\t\t\t\ttitle: {\n\t\t\t\t\t\t\t\t\t\tdisplay: true,\n\t\t\t\t\t\t\t\t\t\ttext: 'Time'\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tplugins: {\n\t\t\t\t\t\t\t\tlegend: {\n\t\t\t\t\t\t\t\t\tposition: 'top'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\t// Initialize latency chart\n\t\t\t\t\tconst latencyCtx = document.getElementById('latency-canvas').getContext('2d');\n\t\t\t\t\tlatencyChart = new Chart(latencyCtx, {\n\t\t\t\t\t\ttype: 'line',\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tlabels: [],\n\t\t\t\t\t\t\tdatasets: [{\n\t\t\t\t\t\t\t\tlabel: 'P99 Latency',\n\t\t\t\t\t\t\t\tdata: [],\n\t\t\t\t\t\t\t\tborderColor: '#FF9800',\n\t\t\t\t\t\t\t\tbackgroundColor: 'rgba(255, 152, 0, 0.1)',\n\t\t\t\t\t\t\t\tborderWidth: 2,\n\t\t\t\t\t\t\t\tfill: false,\n\t\t\t\t\t\t\t\ttension: 0.1\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t},\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\tresponsive: true,\n\t\t\t\t\t\t\tmaintainAspectRatio: false,\n\t\t\t\t\t\t\tanimation: {\n\t\t\t\t\t\t\t\tduration: 750\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tscales: {\n\t\t\t\t\t\t\t\ty: {\n\t\t\t\t\t\t\t\t\tbeginAtZero: true,\n\t\t\t\t\t\t\t\t\ttitle: {\n\t\t\t\t\t\t\t\t\t\tdisplay: true,\n\t\t\t\t\t\t\t\t\t\ttext: 'Milliseconds'\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tx: {\n\t\t\t\t\t\t\t\t\ttitle: {\n\t\t\t\t\t\t\t\t\t\tdisplay: true,\n\t\t\t\t\t\t\t\t\t\ttext: 'Time'\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tplugins: {\n\t\t\t\t\t\t\t\tlegend: {\n\t\t\t\t\t\t\t\t\tposition: 'top'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\t// Initialize error chart\n\t\t\t\t\tconst errorCtx = document.getElementById('error-canvas').getContext('2d');\n\t\t\t\t\terrorChart = new Chart(errorCtx, {\n\t\t\t\t\t\ttype: 'line',\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tlabels: [],\n\t\t\t\t\t\t\tdatasets: [{\n\t\t\t\t\t\t\t\tlabel: 'Error Rate',\n\t\t\t\t\t\t\t\tdata: [],\n\t\t\t\t\t\t\t\tborderColor: '#f44336',\n\t\t\t\t\t\t\t\tbackgroundColor: 'rgba(244, 67, 54, 0.1)',\n\t\t\t\t\t\t\t\tborderWidth: 2,\n\t\t\t\t\t\t\t\tfill: false,\n\t\t\t\t\t\t\t\ttension: 0.1\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t},\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\tresponsive: true,\n\t\t\t\t\t\t\tmaintainAspectRatio: false,\n\t\t\t\t\t\t\tanimation: {\n\t\t\t\t\t\t\t\tduration: 750\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tscales: {\n\t\t\t\t\t\t\t\ty: {\n\t\t\t\t\t\t\t\t\tbeginAtZero: true,\n\t\t\t\t\t\t\t\t\tmax: 100,\n\t\t\t\t\t\t\t\t\ttitle: {\n\t\t\t\t\t\t\t\t\t\tdisplay: true,\n\t\t\t\t\t\t\t\t\t\ttext: 'Error Rate (%)'\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tx: {\n\t\t\t\t\t\t\t\t\ttitle: {\n\t\t\t\t\t\t\t\t\t\tdisplay: true,\n\t\t\t\t\t\t\t\t\t\ttext: 'Time'\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tplugins: {\n\t\t\t\t\t\t\t\tlegend: {\n\t\t\t\t\t\t\t\t\tposition: 'top'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\t// Function to update charts with new data\n\t\t\t\t\tfunction updateCharts() {\n\t\t\t\t\t\tfetch('/api/chart-data')\n\t\t\t\t\t\t\t.then(response => response.json())\n\t\t\t\t\t\t\t.then(data => {\n\t\t\t\t\t\t\t\t// Update throughput chart\n\t\t\t\t\t\t\t\tif (data.throughput && data.throughput.history) {\n\t\t\t\t\t\t\t\t\tconst labels = data.throughput.history.map((_, index) => `T-${data.throughput.history.length - index - 1}`);\n\t\t\t\t\t\t\t\t\tconst actualData = data.throughput.history.map(point => point.value);\n\t\t\t\t\t\t\t\t\tconst expectedData = new Array(data.throughput.history.length).fill(data.throughput.expected_value);\n\n\t\t\t\t\t\t\t\t\tthroughputChart.data.labels = labels;\n\t\t\t\t\t\t\t\t\tthroughputChart.data.datasets[0].data = actualData;\n\t\t\t\t\t\t\t\t\tthroughputChart.data.datasets[1].data = expectedData;\n\t\t\t\t\t\t\t\t\tthroughputChart.update('none'); // No animation for frequent updates\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Update latency chart\n\t\t\t\t\t\t\t\tif (data.latency && data.latency.history) {\n\t\t\t\t\t\t\t\t\tconst labels = data.latency.history.map((_, index) => `T-${data.latency.history.length - index - 1}`);\n\t\t\t\t\t\t\t\t\tconst latencyData = data.latency.history.map(point => point.value);\n\n\t\t\t\t\t\t\t\t\tlatencyChart.data.labels = labels;\n\t\t\t\t\t\t\t\t\tlatencyChart.data.datasets[0].data = latencyData;\n\t\t\t\t\t\t\t\t\tlatencyChart.update('none');\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Update error chart\n\t\t\t\t\t\t\t\tif (data.error && data.error.history) {\n\t\t\t\t\t\t\t\t\tconst labels = data.error.history.map((_, index) => `T-${data.error.history.length - index - 1}`);\n\t\t\t\t\t\t\t\t\tconst errorData = data.error.history.map(point => point.value);\n\n\t\t\t\t\t\t\t\t\terrorChart.data.labels = labels;\n\t\t\t\t\t\t\t\t\terrorChart.data.datasets[0].data = errorData;\n\t\t\t\t\t\t\t\t\terrorChart.update('none');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\t\t\tconsole.error('Error fetching chart data:', error);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\t// Update charts every 500ms\n\t\t\t\t\tupdateCharts(); // Initial load\n\t\t\t\t\tsetInterval(updateCharts, 500);\n\t\t\t\t});\n\t\t\t</script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func BenchmarkControlPanel(data *BenchmarkData) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var5 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var5 == nil {
			templ_7745c5c3_Var5 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "<div class=\"panel\" id=\"control-panel\"><h3>Benchmark Control</h3><div class=\"control-status\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if data.Running {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "<div class=\"status-indicator running\">● Running</div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "<div class=\"status-indicator stopped\">● Stopped</div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "</div><div class=\"control-buttons\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if data.Running {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "<button hx-post=\"/stop\" hx-target=\"#control-panel\" hx-swap=\"outerHTML\" class=\"btn-danger\">Stop Benchmark</button>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "<button hx-post=\"/start\" hx-target=\"#control-panel\" hx-swap=\"outerHTML\" class=\"btn-success\">Start Benchmark</button>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "</div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func BenchmarkMetricsPanel(data *BenchmarkData) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var6 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var6 == nil {
			templ_7745c5c3_Var6 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, "<div class=\"panel\" id=\"metrics-panel\" hx-get=\"/refresh/metrics\" hx-trigger=\"every 500ms\" hx-swap=\"outerHTML\"><h3>Current Metrics</h3><div class=\"metrics-grid\"><div class=\"metric\"><div class=\"metric-value\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var7 string
		templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%.1f", data.Metrics.CurrentOPS))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `benchmark/dashboard.templ`, Line: 318, Col: 76}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, "</div><div class=\"metric-label\">Current OPS</div></div><div class=\"metric\"><div class=\"metric-value\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var8 string
		templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%.1f", data.Metrics.ExpectedOPS))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `benchmark/dashboard.templ`, Line: 322, Col: 77}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, "</div><div class=\"metric-label\">Expected OPS</div></div><div class=\"metric\"><div class=\"metric-value\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var9 string
		templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%.2f%%", data.Metrics.ErrorRate))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `benchmark/dashboard.templ`, Line: 326, Col: 77}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 20, "</div><div class=\"metric-label\">Error Rate</div></div><div class=\"metric\"><div class=\"metric-value\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var10 string
		templ_7745c5c3_Var10, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%dms", data.Metrics.LatencyP99.Milliseconds()))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `benchmark/dashboard.templ`, Line: 330, Col: 91}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var10))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 21, "</div><div class=\"metric-label\">P99 Latency</div></div><div class=\"metric\"><div class=\"metric-value\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var11 string
		templ_7745c5c3_Var11, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", data.Metrics.TotalOps))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `benchmark/dashboard.templ`, Line: 334, Col: 72}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var11))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 22, "</div><div class=\"metric-label\">Total Operations</div></div><div class=\"metric\"><div class=\"metric-value\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var12 string
		templ_7745c5c3_Var12, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", data.Metrics.SuccessfulOps))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `benchmark/dashboard.templ`, Line: 338, Col: 77}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var12))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 23, "</div><div class=\"metric-label\">Successful</div></div><div class=\"metric\"><div class=\"metric-value\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var13 string
		templ_7745c5c3_Var13, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", data.Metrics.ErrorOps))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `benchmark/dashboard.templ`, Line: 342, Col: 72}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var13))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 24, "</div><div class=\"metric-label\">Errors</div></div><div class=\"metric\"><div class=\"metric-value\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var14 string
		templ_7745c5c3_Var14, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", data.ClientData.ActiveClients))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `benchmark/dashboard.templ`, Line: 346, Col: 80}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var14))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 25, "</div><div class=\"metric-label\">Active Clients</div></div></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func BenchmarkConfigPanel(data *BenchmarkData) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var15 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var15 == nil {
			templ_7745c5c3_Var15 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 26, "<div class=\"panel\" id=\"config-panel\"><h3>Configuration</h3><form hx-post=\"/update-config\" hx-target=\"#config-panel\" hx-swap=\"outerHTML\"><div class=\"form-grid\"><div class=\"form-group\"><label>Max Clients:</label> <input type=\"number\" name=\"max_clients\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var16 string
		templ_7745c5c3_Var16, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", data.Config.MaxClients))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `benchmark/dashboard.templ`, Line: 360, Col: 94}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var16))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 27, "\" min=\"1\"></div><div class=\"form-group\"><label>Throttle (OPS):</label> <input type=\"number\" name=\"throttle_ops\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var17 string
		templ_7745c5c3_Var17, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", data.Config.ThrottleOPS))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `benchmark/dashboard.templ`, Line: 365, Col: 96}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var17))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 28, "\" min=\"1\"></div><div class=\"form-group\"><label>Worker Count:</label> <input type=\"number\" name=\"worker_count\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var18 string
		templ_7745c5c3_Var18, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", data.Config.WorkerCount))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `benchmark/dashboard.templ`, Line: 370, Col: 96}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var18))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 29, "\" min=\"1\" max=\"100\"></div><div class=\"form-group\"><label>Metrics Interval:</label> <input type=\"text\" name=\"metrics_interval\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var19 string
		templ_7745c5c3_Var19, templ_7745c5c3_Err = templ.JoinStringErrs(data.Config.MetricsInterval.String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `benchmark/dashboard.templ`, Line: 375, Col: 92}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var19))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 30, "\" placeholder=\"1s\"></div><div class=\"form-group\"><label>Latency Buffer Size:</label> <input type=\"number\" name=\"latency_buffer_size\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var20 string
		templ_7745c5c3_Var20, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", data.Config.LatencyBufferSize))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `benchmark/dashboard.templ`, Line: 380, Col: 109}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var20))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 31, "\" min=\"100\" max=\"10000\"></div></div><button type=\"submit\" class=\"btn-primary\">Update Configuration</button></form></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func BenchmarkClientsPanel(data *BenchmarkData) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var21 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var21 == nil {
			templ_7745c5c3_Var21 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 32, "<div class=\"panel\" id=\"clients-panel\" hx-get=\"/refresh/clients\" hx-trigger=\"every 500ms\" hx-swap=\"outerHTML\"><h3>Client Status</h3><div class=\"clients-summary\"><div class=\"summary-stat\"><span class=\"stat-label\">Active:</span> <span class=\"stat-value\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var22 string
		templ_7745c5c3_Var22, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", data.ClientData.ActiveClients))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `benchmark/dashboard.templ`, Line: 395, Col: 79}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var22))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 33, "</span></div><div class=\"summary-stat\"><span class=\"stat-label\">Maximum:</span> <span class=\"stat-value\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var23 string
		templ_7745c5c3_Var23, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", data.Config.MaxClients))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `benchmark/dashboard.templ`, Line: 399, Col: 72}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var23))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 34, "</span></div><div class=\"summary-stat\"><span class=\"stat-label\">Utilization:</span> <span class=\"stat-value\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var24 string
		templ_7745c5c3_Var24, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%.1f%%", float64(data.ClientData.ActiveClients)/float64(data.Config.MaxClients)*100))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `benchmark/dashboard.templ`, Line: 403, Col: 128}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var24))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 35, "</span></div></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func benchmarkStyles() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var25 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var25 == nil {
			templ_7745c5c3_Var25 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 36, "<style>\n\t\t.container {\n\t\t\tmax-width: 1400px;\n\t\t\tmargin: 0 auto;\n\t\t\tpadding: 20px;\n\t\t}\n\t\t\n\t\t.header {\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: space-between;\n\t\t\talign-items: center;\n\t\t\tmargin-bottom: 20px;\n\t\t\tpadding: 20px;\n\t\t\tbackground: #f8f9fa;\n\t\t\tborder-radius: 8px;\n\t\t\tborder: 1px solid #e0e0e0;\n\t\t}\n\t\t\n\t\t.header h1 {\n\t\t\tmargin: 0;\n\t\t\tcolor: #333;\n\t\t}\n\t\t\n\t\t.dashboard-content {\n\t\t\tpadding: 20px;\n\t\t}\n\t\t\n\t\t.main-panels {\n\t\t\tdisplay: grid;\n\t\t\tgrid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n\t\t\tgap: 20px;\n\t\t}\n\t\t\n\t\t.panel-section {\n\t\t\tmin-height: 200px;\n\t\t}\n\t\t\n\t\t.panel {\n\t\t\tbackground: white;\n\t\t\tpadding: 20px;\n\t\t\tborder-radius: 8px;\n\t\t\tborder: 1px solid #e0e0e0;\n\t\t\tbox-shadow: 0 2px 4px rgba(0,0,0,0.1);\n\t\t}\n\t\t\n\t\t.panel h3 {\n\t\t\tmargin: 0 0 15px 0;\n\t\t\tcolor: #333;\n\t\t\tfont-size: 18px;\n\t\t}\n\t\t\n\t\t.graphs-section {\n\t\t\tgrid-column: 1 / -1;\n\t\t\tmargin-top: 20px;\n\t\t}\n\t\t\n\t\t.graph-grid {\n\t\t\tdisplay: grid;\n\t\t\tgrid-template-columns: repeat(auto-fit, minmax(400px, 1fr));\n\t\t\tgap: 20px;\n\t\t\tmargin-top: 20px;\n\t\t}\n\t\t\n\t\t.graph-container {\n\t\t\tbackground: #f9f9f9;\n\t\t\tpadding: 20px;\n\t\t\tborder-radius: 8px;\n\t\t\tborder: 1px solid #e0e0e0;\n\t\t}\n\t\t\n\t\t.graph-container h3 {\n\t\t\tmargin: 0 0 15px 0;\n\t\t\tcolor: #333;\n\t\t\tfont-size: 16px;\n\t\t}\n\t\t\n\t\t.graph-content {\n\t\t\tposition: relative;\n\t\t\theight: 250px;\n\t\t\twidth: 100%;\n\t\t}\n\t\t\n\t\t.metrics-grid {\n\t\t\tdisplay: grid;\n\t\t\tgrid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n\t\t\tgap: 15px;\n\t\t\tmargin-top: 15px;\n\t\t}\n\t\t\n\t\t.metric {\n\t\t\ttext-align: center;\n\t\t\tpadding: 10px;\n\t\t\tbackground: #f5f5f5;\n\t\t\tborder-radius: 5px;\n\t\t}\n\t\t\n\t\t.metric-value {\n\t\t\tfont-size: 24px;\n\t\t\tfont-weight: bold;\n\t\t\tcolor: #333;\n\t\t}\n\t\t\n\t\t.metric-label {\n\t\t\tfont-size: 12px;\n\t\t\tcolor: #666;\n\t\t\tmargin-top: 5px;\n\t\t}\n\t\t\n\t\t.form-grid {\n\t\t\tdisplay: grid;\n\t\t\tgrid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n\t\t\tgap: 15px;\n\t\t\tmargin-bottom: 20px;\n\t\t}\n\t\t\n\t\t.form-group {\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t}\n\t\t\n\t\t.form-group label {\n\t\t\tmargin-bottom: 5px;\n\t\t\tfont-weight: bold;\n\t\t\tcolor: #333;\n\t\t}\n\t\t\n\t\t.form-group input {\n\t\t\tpadding: 8px;\n\t\t\tborder: 1px solid #ddd;\n\t\t\tborder-radius: 4px;\n\t\t\tfont-size: 14px;\n\t\t}\n\t\t\n\t\t.control-status {\n\t\t\tmargin: 15px 0;\n\t\t}\n\t\t\n\t\t.status-indicator {\n\t\t\tfont-size: 16px;\n\t\t\tfont-weight: bold;\n\t\t\tpadding: 8px 15px;\n\t\t\tborder-radius: 20px;\n\t\t\tdisplay: inline-block;\n\t\t}\n\t\t\n\t\t.status-indicator.running {\n\t\t\tbackground: #e8f5e8;\n\t\t\tcolor: #2e7d32;\n\t\t}\n\t\t\n\t\t.status-indicator.stopped {\n\t\t\tbackground: #ffebee;\n\t\t\tcolor: #c62828;\n\t\t}\n\t\t\n\t\t.control-buttons {\n\t\t\tmargin-top: 15px;\n\t\t}\n\t\t\n\t\t.btn-primary {\n\t\t\tbackground: #2196F3;\n\t\t\tcolor: white;\n\t\t\tborder: none;\n\t\t\tpadding: 10px 20px;\n\t\t\tborder-radius: 4px;\n\t\t\tcursor: pointer;\n\t\t\tfont-size: 14px;\n\t\t}\n\t\t\n\t\t.btn-success {\n\t\t\tbackground: #4CAF50;\n\t\t\tcolor: white;\n\t\t\tborder: none;\n\t\t\tpadding: 10px 20px;\n\t\t\tborder-radius: 4px;\n\t\t\tcursor: pointer;\n\t\t\tfont-size: 14px;\n\t\t}\n\t\t\n\t\t.btn-danger {\n\t\t\tbackground: #f44336;\n\t\t\tcolor: white;\n\t\t\tborder: none;\n\t\t\tpadding: 10px 20px;\n\t\t\tborder-radius: 4px;\n\t\t\tcursor: pointer;\n\t\t\tfont-size: 14px;\n\t\t}\n\t\t\n\t\t.btn-primary:hover, .btn-success:hover, .btn-danger:hover {\n\t\t\topacity: 0.8;\n\t\t}\n\t\t\n\t\t.clients-summary {\n\t\t\tdisplay: flex;\n\t\t\tgap: 20px;\n\t\t\tmargin: 15px 0;\n\t\t\tpadding: 10px;\n\t\t\tbackground: #f5f5f5;\n\t\t\tborder-radius: 5px;\n\t\t}\n\t\t\n\t\t.summary-stat {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tgap: 5px;\n\t\t}\n\t\t\n\t\t.stat-label {\n\t\t\tfont-weight: bold;\n\t\t\tcolor: #666;\n\t\t}\n\t\t\n\t\t.stat-value {\n\t\t\tfont-size: 18px;\n\t\t\tfont-weight: bold;\n\t\t\tcolor: #333;\n\t\t}\n\t\t\n\t\t.clients-table {\n\t\t\twidth: 100%;\n\t\t\tborder-collapse: collapse;\n\t\t}\n\t\t\n\t\t.clients-table th,\n\t\t.clients-table td {\n\t\t\tpadding: 8px 12px;\n\t\t\ttext-align: left;\n\t\t\tborder-bottom: 1px solid #e0e0e0;\n\t\t}\n\t\t\n\t\t.clients-table th {\n\t\t\tbackground: #f5f5f5;\n\t\t\tfont-weight: bold;\n\t\t\tcolor: #333;\n\t\t}\n\t\t\n\t\t.clients-table td {\n\t\t\tfont-size: 12px;\n\t\t\tcolor: #666;\n\t\t}\n\t\t\n\t\t.scrollable {\n\t\t\toverflow-y: auto;\n\t\t}\n\t\t\n\t\t.no-clients {\n\t\t\ttext-align: center;\n\t\t\tpadding: 40px 20px;\n\t\t\tcolor: #666;\n\t\t}\n\t\t\n\t\t.no-clients p {\n\t\t\tmargin: 0 0 5px 0;\n\t\t\tfont-size: 16px;\n\t\t}\n\t\t\n\t\t.no-clients small {\n\t\t\tfont-size: 12px;\n\t\t}\n\t\t\n\t\t.hidden {\n\t\t\tdisplay: none;\n\t\t}\n\t\t\n\t\t.service-info {\n\t\t\tdisplay: flex;\n\t\t\tgap: 20px;\n\t\t\talign-items: center;\n\t\t\tfont-size: 14px;\n\t\t\tcolor: #666;\n\t\t}\n\t\t\n\t\t.service-name {\n\t\t\tfont-weight: bold;\n\t\t\tcolor: #333;\n\t\t}\n\t</style>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
