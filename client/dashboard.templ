package main

import "shared"

const morphSwap = "morph:{ignoreActiveValue:true,morphStyle:'innerHTML'}"

// Client dashboard page
templ ClientDashboard(data ClientData) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>Client Control Panel - { data.ServiceName }</title>
			<script src="https://cdn.jsdelivr.net/npm/htmx.org@2.0.5/dist/htmx.js"></script>
			<script src="https://unpkg.com/idiomorph@0.7.3/dist/idiomorph.js"></script>
			<script src="https://unpkg.com/idiomorph@0.7.3/dist/idiomorph-ext.js"></script>
			@shared.SharedStyles()
		</head>
		<body>
			<div class="container">
				<div class="header">
					<h1>Client Control Panel - { data.ServiceName }</h1>
				</div>
				<!-- Auto-updating header -->
				@shared.HeaderComponent(shared.HeaderData{
					ServiceName:     data.ServiceName,
					ContainerID:     data.ContainerID,
					UptimeFormatted: data.UptimeFormatted,
					CurrentTime:     data.CurrentTime,
					BootstrapURL:    data.BootstrapURL,
					WorkersRunning:  data.ClientManagerData.WorkersRunning,
				})
				<div id="status-content" hx-ext="morph">
					@ClientContent(data)
				</div>
			</div>
		</body>
	</html>
}

// Client content that updates dynamically
templ ClientContent(data ClientData) {
	<div id="status-content" class="client-status-content">
		<div class="grid">
			<!-- Connection Control Panel -->
			@ConnectionControlComponent(ConnectionControlData{
				Connected:       data.Connected,
				BootstrapURL:    data.BootstrapURL,
				ConnectionError: data.ConnectionError,
			})
		</div>

		<!-- Section: Client Manager -->
		<section id="client-manager-section" style="margin-bottom: 8px;">
			<div class="client-manager" id="client-manager" hx-ext="morph">
				@shared.ClientManagerComponent(data.ClientManagerData)
			</div>
		</section>

		<!-- Section: Query Queue -->
		<section id="query-queue-section" style="margin-bottom: 8px;">
			<div class="query-queue-wrapper" style="margin-top: 0; clear: both;" hx-get="/query-queue" hx-trigger="every 5s" hx-swap="morph">
				@QueryQueueComponent(data.QueryQueueItems)
			</div>
		</section>

	</div>
}


templ QueryQueueComponent(items []shared.Entry[int64, string]) {
	<div id="query-queue" class="query-queue-section" style="background: white; padding: 16px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.05);">
		<h2 style="margin-bottom: 1rem; color: #333;">Query Queue</h2>
		if len(items) > 0 {
			<table style="width: 100%; border-collapse: collapse;">
				<thead>
					<tr style="border-bottom: 2px solid #ddd;">
						<th style="text-align: left; padding: 8px;">#</th>
						<th style="text-align: left; padding: 8px;">Container ID</th>
						<th style="text-align: left; padding: 8px;">Priority</th>
					</tr>
				</thead>
				<tbody>
					for i, item := range items {
						<tr data-container-id={item.Value} id={"query-row-" + item.Value} style="border-bottom: 1px solid #eee;">
							<td style="padding: 8px;">{ i }</td>
							<td style="padding: 8px;">{ item.Value }</td>
							<td style="padding: 8px;">{ item.Key }</td>
						</tr>
					}
				</tbody>
			</table>
		} else {
			<p style="color: #666; font-style: italic;">Die Query Queue ist leer.</p>
		}
	</div>
}

/// Dashboard mit Kontaktliste (nur Namen anzeigen) und Chatverlauf
templ chatDashboard(contacts []ContactMessages, client shared.ClientIdentity) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>Chat Dashboard - { client.Name }</title>
			<script src="https://cdn.jsdelivr.net/npm/htmx.org@2.0.5/dist/htmx.js"></script>
			<script src="https://unpkg.com/idiomorph@0.7.3/dist/idiomorph.js"></script>
			<script src="https://unpkg.com/idiomorph@0.7.3/dist/idiomorph-ext.js"></script>
		</head>
		<body hx-ext="morph">
			<div class="whatsapp-chat-container" style="display: flex; height: 100vh; background: #ece5dd; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;">
				<!-- Sidebar: Contact list -->
				<div class="whatsapp-sidebar" style="width: 320px; background: #fff; border-right: 1px solid #ddd; display: flex; flex-direction: column;">
					<div style="padding: 16px; background: #075e54; color: #fff; font-size: 20px; font-weight: bold;">
						Contact list, you are { client.Name }
					</div>
					@contactListPartial(contacts, "")
				</div>
				<!-- Main Chat Area -->
				<div
					id="chat-area"
					class="whatsapp-main"
					style="flex: 1; display: flex; flex-direction: column; background: #ece5dd;"
				>
					<!-- Chat header -->
					<div style="background: #075e54; color: #fff; padding: 14px 20px; font-size: 16px; font-weight: 500; border-bottom: 1px solid #ddd;">
						Chat
					</div>
					<!-- Messaging area -->
					<div id="messages" style="flex: 1; overflow-y: auto; padding: 20px; background: #ece5dd;">
						<p style="color: #666;">Wähle einen Kontakt aus, um den Chatverlauf anzuzeigen.</p>
					</div>
				</div>
			</div>
		</body>
	</html>
}

// Contact list partial that can be updated via HTMX
templ contactListPartial(contacts []ContactMessages, selectedContactID string) {
	<div
		id="contact-list"
		hx-get="/chat/contacts"
		hx-trigger="load, every 5s"
		hx-swap="morph:{ignoreActiveValue:true,morphStyle:'outerHTML'}"
		style="flex: 1; overflow-y: auto;"
	>
		<ul style="list-style: none; margin: 0; padding: 0;">
			for _, contact := range contacts {
				<li style="border-bottom: 1px solid #f0f0f0;">
					<button
						hx-get={ "/chat/conversation?selected_contact=" + contact.Contact + "&client_name=" + contact.Contact }
						hx-target="#chat-area"
						hx-swap="morph"
						style="width: 100%; text-align: left; background: none; border: none; padding: 12px 16px; cursor: pointer; display: flex; flex-direction: column; align-items: flex-start; color: inherit; transition: background-color 0.2s;"
						onmouseover="this.style.backgroundColor='#f5f5f5'"
						onmouseout="this.style.backgroundColor='transparent'"
					>
						<div style="font-weight: 500; color: #075e54;">{ contact.ContactName }</div>
						if len(contact.Messages) > 0 {
							<div style="font-size: 12px; color: #666; margin-top: 2px; max-width: 250px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
								{ contact.Messages[len(contact.Messages)-1].Message }
							</div>
						}
					</button>
				</li>
			}
		</ul>
		if len(contacts) == 0 {
			<div style="padding: 20px; text-align: center; color: #666;">
				Keine Kontakte vorhanden
			</div>
		}
	</div>
}

// Show chat messages for a specific contact
templ chatMessages(contact string, userName string, contacts []ContactMessages) {
	<div>
		<h2>Chat zwischen { userName } und { contact }</h2>
		<div class="message-list" style="margin-bottom: 10px;">
			for _, c := range contacts {
				if c.Contact == contact {
					for _, msg := range c.Messages {
						if (msg.SenderID == userName && msg.ReceiverID == contact) || (msg.SenderID == contact && msg.ReceiverID == userName) {
							<div class="message" style="border-bottom: 1px solid #eee; padding: 5px 0;">
								<small>{ msg.Timestamp } | { msg.SenderID } → { msg.ReceiverID }</small>
								<p>{ msg.Message }</p>
							</div>
						}
					}
				}
			}
		</div>
	</div>
}

// Dashboard mit Kontaktliste (nur Namen anzeigen) und Chatverlauf (zeigt rechts alle Nachrichten aus messages)
templ chatVerlauf(messages []Message, client shared.ClientIdentity, selectedContact string, contactName string) {
	<!-- Main Chat Area for HTMX replacement -->
	<div
		id="chat-area"
		class="whatsapp-main"
		style="flex: 1; display: flex; flex-direction: column; background: #ece5dd;"
		hx-get={ "/chat/conversation?selected_contact=" + selectedContact + "&client_name=" + client.ContainerID }
		hx-trigger="every 3s"
		hx-swap="morph:{ignoreActiveValue:true,morphStyle:'outerHTML'}"
		hx-ext="morph"
	>
		<!-- Chat header -->
		<div style="background: #075e54; color: #fff; padding: 14px 20px; font-size: 16px; font-weight: 500; border-bottom: 1px solid #ddd;">
			Chat, you are chatting with { contactName }
		</div>
		<!-- Show all messages for contact -->
		<div id="messages" style="flex: 1; overflow-y: auto; padding: 20px; background: #ece5dd;">
			if len(messages) == 0 {
				<p style="color: #666;">No messages found</p>
			} else {
				for _, msg := range messages {
					if msg.SenderID == client.ContainerID {
						<!-- Sent message (right aligned, green) -->
						<div style="display: flex; justify-content: flex-end; margin-bottom: 10px;">
							<div style="background: #dcf8c6; padding: 8px 12px; border-radius: 8px; max-width: 70%; box-shadow: 0 1px 2px rgba(0,0,0,0.1);">
								<div>{ msg.Message }</div>
								<div style="font-size: 11px; color: #666; margin-top: 4px; text-align: right;">{ msg.Timestamp }</div>
							</div>
						</div>
					} else {
						<!-- Received message (left aligned, white) -->
						<div style="display: flex; justify-content: flex-start; margin-bottom: 10px;">
							<div style="background: #fff; padding: 8px 12px; border-radius: 8px; max-width: 70%; box-shadow: 0 1px 2px rgba(0,0,0,0.1);">
								<div>{ msg.Message }</div>
								<div style="font-size: 11px; color: #666; margin-top: 4px;">{ msg.Timestamp }</div>
							</div>
						</div>
					}
				}
			}
		</div>
		<!-- Messaging form -->
		<form
			hx-post="/chat/send"
			hx-target="#chat-area"
			hx-swap="morph"
			hx-trigger="submit"
			style="display: flex; align-items: center; padding: 16px; background: #f7f7f7; border-top: 1px solid #ddd;"
		>
			<input
				type="hidden"
				name="contact"
				value={ selectedContact }
			/>
			<input
				type="text"
				name="message"
				placeholder="Enter your message here..."
				required
				autocomplete="off"
				style="flex: 1; padding: 10px; border: 1px solid #ddd; border-radius: 20px; margin-right: 10px; outline: none;"
			/>
			<button
				type="submit"
				style="background: #075e54; color: #fff; border: none; padding: 10px 20px; border-radius: 20px; cursor: pointer; transition: background-color 0.2s;"
				onmouseover="this.style.backgroundColor='#064940'"
				onmouseout="this.style.backgroundColor='#075e54'"
			>
				Send
			</button>
		</form>
	</div>
}
